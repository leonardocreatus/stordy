# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import transaction_pb2 as transaction__pb2


class TransactionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTransaction = channel.unary_unary(
                '/stordy.transaction.TransactionService/AddTransaction',
                request_serializer=transaction__pb2.AddTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.Empty.FromString,
                )
        self.FindTransactionByHash = channel.unary_unary(
                '/stordy.transaction.TransactionService/FindTransactionByHash',
                request_serializer=transaction__pb2.FindTransactionByHashRequest.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.ExistsTransactionOnBlock = channel.unary_unary(
                '/stordy.transaction.TransactionService/ExistsTransactionOnBlock',
                request_serializer=transaction__pb2.ExistsTransactionOnBlockRequet.SerializeToString,
                response_deserializer=transaction__pb2.ExistsTransactionOnBlockReply.FromString,
                )
        self.FindLastTransaction = channel.unary_unary(
                '/stordy.transaction.TransactionService/FindLastTransaction',
                request_serializer=transaction__pb2.FindLastTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.FindAllTransactions = channel.unary_unary(
                '/stordy.transaction.TransactionService/FindAllTransactions',
                request_serializer=transaction__pb2.FindAllTransactionsRequest.SerializeToString,
                response_deserializer=transaction__pb2.FindAllTransactionsReply.FromString,
                )


class TransactionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTransactionByHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExistsTransactionOnBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindLastTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransaction,
                    request_deserializer=transaction__pb2.AddTransactionRequest.FromString,
                    response_serializer=transaction__pb2.Empty.SerializeToString,
            ),
            'FindTransactionByHash': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTransactionByHash,
                    request_deserializer=transaction__pb2.FindTransactionByHashRequest.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'ExistsTransactionOnBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ExistsTransactionOnBlock,
                    request_deserializer=transaction__pb2.ExistsTransactionOnBlockRequet.FromString,
                    response_serializer=transaction__pb2.ExistsTransactionOnBlockReply.SerializeToString,
            ),
            'FindLastTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.FindLastTransaction,
                    request_deserializer=transaction__pb2.FindLastTransactionRequest.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'FindAllTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAllTransactions,
                    request_deserializer=transaction__pb2.FindAllTransactionsRequest.FromString,
                    response_serializer=transaction__pb2.FindAllTransactionsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stordy.transaction.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stordy.transaction.TransactionService/AddTransaction',
            transaction__pb2.AddTransactionRequest.SerializeToString,
            transaction__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTransactionByHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stordy.transaction.TransactionService/FindTransactionByHash',
            transaction__pb2.FindTransactionByHashRequest.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExistsTransactionOnBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stordy.transaction.TransactionService/ExistsTransactionOnBlock',
            transaction__pb2.ExistsTransactionOnBlockRequet.SerializeToString,
            transaction__pb2.ExistsTransactionOnBlockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindLastTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stordy.transaction.TransactionService/FindLastTransaction',
            transaction__pb2.FindLastTransactionRequest.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stordy.transaction.TransactionService/FindAllTransactions',
            transaction__pb2.FindAllTransactionsRequest.SerializeToString,
            transaction__pb2.FindAllTransactionsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
